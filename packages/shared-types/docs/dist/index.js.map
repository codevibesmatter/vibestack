{"version":3,"sources":["../src/enums.ts","../src/schemas.ts","../src/serialization.ts","../src/error-tracking.ts","../src/store.ts","../src/cloudflare-do.ts","../src/cloudflare-worker.ts"],"names":["UserRole","ProjectStatus","TaskStatus","TaskPriority","z","TypeErrorCategory","createStore"],"mappings":"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","file":"index.js","sourcesContent":["export enum UserRole {\n  ADMIN = 'admin',\n  MEMBER = 'member',\n  GUEST = 'guest'\n}\n\nexport enum ProjectStatus {\n  ACTIVE = 'active',\n  ARCHIVED = 'archived',\n  DRAFT = 'draft'\n}\n\nexport enum TaskStatus {\n  TODO = 'todo',\n  IN_PROGRESS = 'in_progress',\n  REVIEW = 'review',\n  DONE = 'done'\n}\n\nexport enum TaskPriority {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  URGENT = 'urgent'\n} ","import { z } from 'zod';\nimport { UserRole, ProjectStatus, TaskStatus, TaskPriority } from './enums';\n\n// Base schema for all entities\nexport const baseSchema = z.object({\n  id: z.string().uuid(),\n  createdAt: z.number(),\n  updatedAt: z.number(),\n  version: z.number().min(0)\n});\n\nexport type BaseSchema = z.infer<typeof baseSchema>;\n\n// User schemas\nexport const userSyncableSchema = baseSchema.extend({\n  email: z.string().email(),\n  name: z.string().min(1),\n  role: z.nativeEnum(UserRole),\n  avatar: z.string().url().optional(),\n  lastActive: z.number()\n});\n\nexport const userPostgresOnlySchema = z.object({\n  passwordHash: z.string(),\n  failedLoginAttempts: z.number(),\n  lastLoginIp: z.string().optional(),\n  verificationToken: z.string().optional(),\n  resetPasswordToken: z.string().optional(),\n  lastPasswordChange: z.number().optional(),\n  emailVerified: z.boolean(),\n  metadata: z.record(z.string(), z.unknown()).optional()\n});\n\nexport const userCompleteSchema = userSyncableSchema.merge(userPostgresOnlySchema);\n\nexport type UserSyncable = z.infer<typeof userSyncableSchema>;\nexport type UserPostgresOnly = z.infer<typeof userPostgresOnlySchema>;\nexport type UserComplete = z.infer<typeof userCompleteSchema>;\n\n// Project schemas\nexport const projectSyncableSchema = baseSchema.extend({\n  name: z.string().min(1),\n  description: z.string(),\n  status: z.nativeEnum(ProjectStatus),\n  ownerId: z.string().uuid(),\n  settings: z.object({\n    isPublic: z.boolean(),\n    allowGuests: z.boolean()\n  })\n});\n\nexport const projectPostgresOnlySchema = z.object({\n  deletedAt: z.number().optional(),\n  archivedReason: z.string().optional(),\n  lastBackupAt: z.number().optional(),\n  auditLog: z.array(z.object({\n    action: z.string(),\n    userId: z.string(),\n    timestamp: z.number(),\n    details: z.record(z.string(), z.unknown())\n  })).optional(),\n  metadata: z.record(z.string(), z.unknown()).optional()\n});\n\nexport const projectCompleteSchema = projectSyncableSchema.merge(projectPostgresOnlySchema);\n\nexport type ProjectSyncable = z.infer<typeof projectSyncableSchema>;\nexport type ProjectPostgresOnly = z.infer<typeof projectPostgresOnlySchema>;\nexport type ProjectComplete = z.infer<typeof projectCompleteSchema>;\n\n// Task schemas\nexport const taskSyncableSchema = baseSchema.extend({\n  title: z.string().min(1),\n  description: z.string(),\n  status: z.nativeEnum(TaskStatus),\n  priority: z.nativeEnum(TaskPriority),\n  projectId: z.string().uuid(),\n  assigneeId: z.string().uuid(),\n  dueDate: z.number().optional(),\n  completedAt: z.number().optional(),\n  tags: z.array(z.string())\n});\n\nexport const taskPostgresOnlySchema = z.object({\n  timeTracking: z.array(z.object({\n    startTime: z.number(),\n    endTime: z.number().optional(),\n    userId: z.string()\n  })).optional(),\n  comments: z.array(z.object({\n    id: z.string(),\n    content: z.string(),\n    userId: z.string(),\n    createdAt: z.number(),\n    editedAt: z.number().optional()\n  })).optional(),\n  history: z.array(z.object({\n    field: z.string(),\n    oldValue: z.unknown(),\n    newValue: z.unknown(),\n    userId: z.string(),\n    timestamp: z.number()\n  })).optional(),\n  metadata: z.record(z.string(), z.unknown()).optional()\n});\n\nexport const taskCompleteSchema = taskSyncableSchema.merge(taskPostgresOnlySchema);\n\nexport type TaskSyncable = z.infer<typeof taskSyncableSchema>;\nexport type TaskPostgresOnly = z.infer<typeof taskPostgresOnlySchema>;\nexport type TaskComplete = z.infer<typeof taskCompleteSchema>; ","import { z } from 'zod';\nimport type { Store } from 'tinybase';\nimport type { BaseSchema } from './schemas';\n\n// TinyBase store data type (since it's not exported by TinyBase)\ntype StoreData = Record<string, string | number | boolean | null>;\n\n// PostgreSQL JSON compatible type\ntype PostgresJsonValue = string | number | boolean | null | PostgresJsonArray | PostgresJsonObject;\ninterface PostgresJsonObject { [key: string]: PostgresJsonValue }\ninterface PostgresJsonArray extends Array<PostgresJsonValue> {}\n\n/**\n * Type-safe serialization helpers for converting between different data representations\n */\n\n// Type for validation errors\nexport interface ValidationError {\n  path: (string | number)[];  // Updated to match Zod's path type\n  message: string;\n  code: 'invalid_type' | 'invalid_value' | 'missing_field';\n}\n\n// Options for serialization\nexport interface SerializationOptions {\n  strict?: boolean;\n  onError?: (error: ValidationError) => void;\n}\n\n/**\n * Type guards for special types\n */\nfunction isDate(value: unknown): value is Date {\n  return value instanceof Date && !isNaN(value.getTime());\n}\n\n/**\n * Convert complex types to TinyBase-compatible format\n * TinyBase only supports string, number, boolean, and null\n */\nexport function toTinyBase<T extends BaseSchema>(\n  data: T,\n  options: SerializationOptions = {}\n): StoreData {\n  try {\n    return Object.entries(data).reduce((acc, [key, value]) => {\n      // Handle arrays and objects by converting to JSON strings\n      if (Array.isArray(value) || (typeof value === 'object' && value !== null)) {\n        acc[key] = JSON.stringify(value);\n      } else {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as StoreData);\n  } catch (error) {\n    const validationError: ValidationError = {\n      path: [],\n      message: error instanceof Error ? error.message : 'Serialization failed',\n      code: 'invalid_type'\n    };\n    options.onError?.(validationError);\n    if (options.strict) {\n      throw error;\n    }\n    return {} as StoreData;\n  }\n}\n\n/**\n * Convert TinyBase data back to typed objects\n */\nexport function fromTinyBase<T>(\n  data: StoreData,\n  schema: z.ZodSchema<T>,\n  options: SerializationOptions = {}\n): T {\n  try {\n    // First pass: parse JSON strings back to objects\n    const parsed = Object.entries(data).reduce((acc, [key, value]) => {\n      if (typeof value === 'string') {\n        try {\n          acc[key] = JSON.parse(value);\n        } catch {\n          acc[key] = value; // Not JSON, keep as string\n        }\n      } else {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as Record<string, unknown>);\n\n    // Second pass: validate with Zod schema\n    return schema.parse(parsed);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      error.errors.forEach(err => {\n        const validationError: ValidationError = {\n          path: err.path,\n          message: err.message,\n          code: 'invalid_value'\n        };\n        options.onError?.(validationError);\n      });\n    }\n    if (options.strict) {\n      throw error;\n    }\n    return {} as T;\n  }\n}\n\n/**\n * Type guard to check if data matches schema\n */\nexport function isValidData<T>(\n  data: unknown,\n  schema: z.ZodSchema<T>\n): data is T {\n  try {\n    schema.parse(data);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Development-only deep validation\n * This is more expensive but provides better error messages\n */\nexport function validateData<T>(\n  data: unknown,\n  schema: z.ZodSchema<T>,\n  options: SerializationOptions = {}\n): { valid: boolean; errors: ValidationError[] } {\n  try {\n    schema.parse(data);\n    return { valid: true, errors: [] };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errors = error.errors.map(err => ({\n        path: err.path,\n        message: err.message,\n        code: 'invalid_value' as const\n      }));\n      errors.forEach(err => options.onError?.(err));\n      return { valid: false, errors };\n    }\n    return {\n      valid: false,\n      errors: [{\n        path: [],\n        message: error instanceof Error ? error.message : 'Unknown validation error',\n        code: 'invalid_type'\n      }]\n    };\n  }\n}\n\n/**\n * Convert application types to PostgreSQL-compatible format\n * Handles JSON/JSONB fields and proper type mapping\n */\nexport function toPostgres<T extends BaseSchema>(\n  data: T,\n  options: SerializationOptions = {}\n): Record<string, unknown> {\n  try {\n    return Object.entries(data).reduce((acc, [key, value]) => {\n      // Handle Date objects\n      if (isDate(value)) {\n        acc[key] = value.toISOString();\n      }\n      // Handle arrays and objects that need to be stored as JSONB\n      else if (Array.isArray(value) || (typeof value === 'object' && value !== null)) {\n        // Ensure the object is JSON-compatible\n        const jsonValue = JSON.parse(JSON.stringify(value)) as PostgresJsonValue;\n        acc[key] = jsonValue;\n      }\n      // Handle primitive values\n      else {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as Record<string, unknown>);\n  } catch (error) {\n    const validationError: ValidationError = {\n      path: [],\n      message: error instanceof Error ? error.message : 'PostgreSQL serialization failed',\n      code: 'invalid_type'\n    };\n    options.onError?.(validationError);\n    if (options.strict) {\n      throw error;\n    }\n    return {};\n  }\n}\n\n/**\n * Convert PostgreSQL data back to application types\n * Handles JSON/JSONB fields and proper type mapping\n */\nexport function fromPostgres<T>(\n  data: Record<string, unknown>,\n  schema: z.ZodSchema<T>,\n  options: SerializationOptions = {}\n): T {\n  try {\n    // First pass: handle special PostgreSQL types\n    const parsed = Object.entries(data).reduce((acc, [key, value]) => {\n      // Handle PostgreSQL timestamp strings\n      if (typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n        acc[key] = new Date(value);\n      }\n      // Handle JSONB fields that are already parsed by pg\n      else if (typeof value === 'object' && value !== null) {\n        acc[key] = value;\n      }\n      // Keep other values as is\n      else {\n        acc[key] = value;\n      }\n      return acc;\n    }, {} as Record<string, unknown>);\n\n    // Second pass: validate with Zod schema\n    return schema.parse(parsed);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      error.errors.forEach(err => {\n        const validationError: ValidationError = {\n          path: err.path,\n          message: err.message,\n          code: 'invalid_value'\n        };\n        options.onError?.(validationError);\n      });\n    }\n    if (options.strict) {\n      throw error;\n    }\n    return {} as T;\n  }\n} ","import { z } from 'zod';\nimport type { ValidationError } from './serialization';\n\n/**\n * Categories of type safety errors\n */\nexport enum TypeErrorCategory {\n  SCHEMA_VALIDATION = 'schema_validation',\n  SERIALIZATION = 'serialization',\n  TYPE_CONVERSION = 'type_conversion',\n  RUNTIME_MISMATCH = 'runtime_mismatch'\n}\n\n/**\n * Detailed error context\n */\nexport interface TypeErrorContext {\n  category: TypeErrorCategory;\n  operation: string;\n  table?: string;\n  data?: unknown;\n  path?: (string | number)[];\n  timestamp: number;\n  duration?: number;\n}\n\n/**\n * Error tracking metrics\n */\nexport interface TypeSafetyMetrics {\n  totalErrors: number;\n  errorsByCategory: Record<TypeErrorCategory, number>;\n  averageValidationTime: number;\n  errorRate: number;\n  lastError?: TypeErrorContext;\n}\n\n/**\n * Error tracking configuration\n */\nexport interface ErrorTrackingConfig {\n  enabled: boolean;\n  sampleRate?: number;\n  maxErrors?: number;\n  onError?: (context: TypeErrorContext) => void;\n}\n\n/**\n * Type safety error tracker\n */\nexport class TypeSafetyTracker {\n  private errors: TypeErrorContext[] = [];\n  private startTime: number = Date.now();\n  private validationTimes: number[] = [];\n  private config: ErrorTrackingConfig;\n\n  constructor(config: ErrorTrackingConfig) {\n    this.config = {\n      sampleRate: 1,\n      maxErrors: 1000,\n      ...config\n    };\n  }\n\n  /**\n   * Track a type safety error\n   */\n  trackError(\n    category: TypeErrorCategory,\n    operation: string,\n    details: Partial<TypeErrorContext> = {}\n  ): void {\n    if (!this.config.enabled || Math.random() > (this.config.sampleRate || 1)) {\n      return;\n    }\n\n    const context: TypeErrorContext = {\n      category,\n      operation,\n      timestamp: Date.now(),\n      ...details\n    };\n\n    this.errors.push(context);\n    if (this.errors.length > (this.config.maxErrors || 1000)) {\n      this.errors.shift();\n    }\n\n    this.config.onError?.(context);\n  }\n\n  /**\n   * Track validation performance\n   */\n  trackValidation(duration: number): void {\n    this.validationTimes.push(duration);\n    if (this.validationTimes.length > 1000) {\n      this.validationTimes.shift();\n    }\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): TypeSafetyMetrics {\n    const totalErrors = this.errors.length;\n    const errorsByCategory = Object.values(TypeErrorCategory).reduce(\n      (acc, category) => {\n        acc[category] = this.errors.filter(e => e.category === category).length;\n        return acc;\n      },\n      {} as Record<TypeErrorCategory, number>\n    );\n\n    const avgValidationTime = this.validationTimes.length\n      ? this.validationTimes.reduce((a, b) => a + b, 0) / this.validationTimes.length\n      : 0;\n\n    const timespan = Date.now() - this.startTime;\n    const errorRate = totalErrors / (timespan / (1000 * 60 * 60)); // Errors per hour\n\n    return {\n      totalErrors,\n      errorsByCategory,\n      averageValidationTime: avgValidationTime,\n      errorRate,\n      lastError: this.errors[this.errors.length - 1]\n    };\n  }\n\n  /**\n   * Get error history\n   */\n  getErrorHistory(\n    options: {\n      category?: TypeErrorCategory;\n      table?: string;\n      limit?: number;\n      since?: number;\n    } = {}\n  ): TypeErrorContext[] {\n    let filtered = this.errors;\n\n    if (options.category) {\n      filtered = filtered.filter(e => e.category === options.category);\n    }\n    if (options.table) {\n      filtered = filtered.filter(e => e.table === options.table);\n    }\n    filtered = filtered.filter(e => e.timestamp >= (options.since ?? 0));\n\n    return filtered.slice(-(options.limit || 100));\n  }\n\n  /**\n   * Clear error history\n   */\n  clearHistory(): void {\n    this.errors = [];\n    this.validationTimes = [];\n    this.startTime = Date.now();\n  }\n} ","import { z } from 'zod';\nimport { Store, createStore, type Cell, type Row } from 'tinybase';\nimport type { BaseSchema } from './schemas';\nimport { toTinyBase, fromTinyBase, type ValidationError, type SerializationOptions } from './serialization';\nimport { TypeSafetyTracker, TypeErrorCategory, type ErrorTrackingConfig } from './error-tracking';\n\n// TinyBase store data type (since it's not exported by TinyBase)\ntype StoreData = Record<string, string | number | boolean | null>;\n\nexport interface TypedStoreConfig {\n  strict?: boolean;\n  onError?: (error: ValidationError) => void;\n}\n\n/**\n * Type-safe wrapper around TinyBase store\n */\nexport class TypedStore<T extends BaseSchema> {\n  private store: Store;\n  private schema: z.ZodSchema<T>;\n  private options: SerializationOptions;\n  private errorTracker: TypeSafetyTracker;\n  private config: TypedStoreConfig;\n\n  constructor(\n    schema: z.ZodSchema<T>, \n    options: SerializationOptions = {},\n    errorTracking: ErrorTrackingConfig = { enabled: true },\n    config: TypedStoreConfig = {}\n  ) {\n    this.store = createStore();\n    this.schema = schema;\n    this.options = options;\n    this.errorTracker = new TypeSafetyTracker(errorTracking);\n    this.config = {\n      strict: true,\n      ...config\n    };\n  }\n\n  /**\n   * Set data with type validation\n   */\n  set(tableId: string, rowId: string, data: T): void {\n    const start = performance.now();\n    try {\n      const serialized = toTinyBase(data, {\n        ...this.options,\n        onError: (error) => {\n          this.options.onError?.(error);\n          this.errorTracker.trackError(TypeErrorCategory.SERIALIZATION, 'set', {\n            table: tableId,\n            data,\n            path: error.path\n          });\n        }\n      });\n      \n      // Convert to TinyBase Row type (exclude null values)\n      const row = Object.entries(serialized).reduce((acc, [key, value]) => {\n        if (value !== null) {\n          acc[key] = value as Cell;\n        }\n        return acc;\n      }, {} as Row);\n      \n      this.store.setRow(tableId, rowId, row);\n      this.errorTracker.trackValidation(performance.now() - start);\n    } catch (error) {\n      this.errorTracker.trackError(TypeErrorCategory.RUNTIME_MISMATCH, 'set', {\n        table: tableId,\n        data,\n        duration: performance.now() - start\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get data with type validation\n   */\n  get(tableId: string, rowId: string): T | null {\n    const start = performance.now();\n    try {\n      const data = this.store.getRow(tableId, rowId);\n      if (!data) return null;\n      \n      const result = fromTinyBase(data as StoreData, this.schema, {\n        ...this.options,\n        onError: (error) => {\n          this.options.onError?.(error);\n          this.errorTracker.trackError(TypeErrorCategory.TYPE_CONVERSION, 'get', {\n            table: tableId,\n            data,\n            path: error.path\n          });\n        }\n      });\n      \n      this.errorTracker.trackValidation(performance.now() - start);\n      return result;\n    } catch (error) {\n      this.errorTracker.trackError(TypeErrorCategory.RUNTIME_MISMATCH, 'get', {\n        table: tableId,\n        duration: performance.now() - start\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get all rows from a table\n   */\n  getAll(tableId: string): Record<string, T> {\n    const start = performance.now();\n    try {\n      const table = this.store.getTable(tableId);\n      const result = Object.entries(table).reduce((acc, [rowId, data]) => {\n        acc[rowId] = fromTinyBase(data as StoreData, this.schema, {\n          ...this.options,\n          onError: (error) => {\n            this.options.onError?.(error);\n            this.errorTracker.trackError(TypeErrorCategory.TYPE_CONVERSION, 'getAll', {\n              table: tableId,\n              data,\n              path: error.path\n            });\n          }\n        });\n        return acc;\n      }, {} as Record<string, T>);\n      \n      this.errorTracker.trackValidation(performance.now() - start);\n      return result;\n    } catch (error) {\n      this.errorTracker.trackError(TypeErrorCategory.RUNTIME_MISMATCH, 'getAll', {\n        table: tableId,\n        duration: performance.now() - start\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a row\n   */\n  delete(tableId: string, rowId: string): void {\n    this.store.delRow(tableId, rowId);\n  }\n\n  /**\n   * Add a listener for changes to a table\n   * @returns A function that removes the listener when called\n   */\n  addListener(tableId: string, callback: (data: Record<string, T>) => void): () => void {\n    const listener = () => {\n      const data = this.getAll(tableId);\n      callback(data);\n    };\n    const listenerId = this.store.addTableListener(tableId, listener);\n    return () => {\n      this.store.delListener(listenerId);\n    };\n  }\n\n  /**\n   * Get the underlying TinyBase store\n   */\n  getStore(): Store {\n    return this.store;\n  }\n\n  /**\n   * Validate all data in a table\n   */\n  validateTable(tableId: string): ValidationError[] {\n    const start = performance.now();\n    const errors: ValidationError[] = [];\n    \n    try {\n      const table = this.store.getTable(tableId);\n      Object.entries(table).forEach(([rowId, data]) => {\n        try {\n          fromTinyBase(data as StoreData, this.schema, {\n            ...this.options,\n            onError: (error) => {\n              errors.push(error);\n              this.errorTracker.trackError(TypeErrorCategory.SCHEMA_VALIDATION, 'validateTable', {\n                table: tableId,\n                data,\n                path: error.path\n              });\n            }\n          });\n        } catch (error) {\n          // Handle individual row validation errors\n          this.errorTracker.trackError(TypeErrorCategory.SCHEMA_VALIDATION, 'validateTable', {\n            table: tableId,\n            data\n          });\n        }\n      });\n      \n      this.errorTracker.trackValidation(performance.now() - start);\n      return errors;\n    } catch (error) {\n      this.errorTracker.trackError(TypeErrorCategory.RUNTIME_MISMATCH, 'validateTable', {\n        table: tableId,\n        duration: performance.now() - start\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get error tracking metrics\n   */\n  getErrorMetrics() {\n    return this.errorTracker.getMetrics();\n  }\n\n  /**\n   * Get error history\n   */\n  getErrorHistory(options = {}) {\n    return this.errorTracker.getErrorHistory(options);\n  }\n\n  validate(data: unknown): T | undefined {\n    try {\n      return this.schema.parse(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const validationError: ValidationError = {\n          message: error.errors[0]?.message || 'Validation failed',\n          path: error.errors[0]?.path || [],\n          code: 'invalid_value'\n        };\n        this.config.onError?.(validationError);\n      }\n      if (this.config.strict) {\n        throw error;\n      }\n      return undefined;\n    }\n  }\n} ","/// <reference types=\"@cloudflare/workers-types\" />\n\nimport type { Env } from './cloudflare';\n\n/**\n * Base Durable Object class with type safety\n */\nexport abstract class TypedDurableObject {\n  protected readonly state: DurableObjectState;\n  protected readonly env: Env;\n\n  constructor(state: DurableObjectState, env: Env) {\n    this.state = state;\n    this.env = env;\n  }\n\n  /**\n   * Handle HTTP requests\n   */\n  async fetch(request: Request): Promise<Response> {\n    try {\n      // Check for WebSocket upgrade\n      const upgradeHeader = request.headers.get('Upgrade');\n      if (upgradeHeader?.toLowerCase() === 'websocket') {\n        return this.handleWebSocket(request);\n      }\n\n      // Handle HTTP request\n      return this.handleRequest(request);\n    } catch (error) {\n      console.error('Error in fetch:', error);\n      return new Response('Internal Error', { status: 500 });\n    }\n  }\n\n  /**\n   * Handle WebSocket connections\n   */\n  protected async handleWebSocket(request: Request): Promise<Response> {\n    const [client, server] = Object.values(new WebSocketPair());\n\n    // Setup server handlers\n    server.accept();\n    \n    server.addEventListener('message', async (event) => {\n      try {\n        await this.handleWebSocketMessage(server, event);\n      } catch (error) {\n        console.error('Error in WebSocket message:', error);\n        server.close(1011, 'Internal Error');\n      }\n    });\n\n    server.addEventListener('close', (event) => {\n      this.handleWebSocketClose(server, event);\n    });\n\n    server.addEventListener('error', (event) => {\n      this.handleWebSocketError(server, event);\n    });\n\n    // Return the client socket\n    return new Response(null, {\n      status: 101,\n      webSocket: client,\n    });\n  }\n\n  /**\n   * Handle HTTP requests (to be implemented by subclasses)\n   */\n  protected abstract handleRequest(request: Request): Promise<Response>;\n\n  /**\n   * Handle WebSocket messages (to be implemented by subclasses)\n   */\n  protected abstract handleWebSocketMessage(\n    ws: WebSocket,\n    event: MessageEvent\n  ): Promise<void>;\n\n  /**\n   * Handle WebSocket close\n   */\n  protected handleWebSocketClose(ws: WebSocket, event: CloseEvent): void {\n    // Optional override\n  }\n\n  /**\n   * Handle WebSocket errors\n   */\n  protected handleWebSocketError(ws: WebSocket, event: Event): void {\n    console.error('WebSocket error:', event);\n  }\n\n  /**\n   * Helper to run code with concurrency control\n   */\n  protected async withConcurrencyControl<T>(\n    callback: () => Promise<T>\n  ): Promise<T> {\n    return this.state.blockConcurrencyWhile(async () => {\n      return callback();\n    });\n  }\n\n  /**\n   * Helper to run code in a transaction\n   */\n  protected async withTransaction<T>(\n    callback: (txn: DurableObjectTransaction) => Promise<T>\n  ): Promise<T> {\n    return this.state.storage.transaction(callback);\n  }\n\n  /**\n   * Helper to store data\n   */\n  protected async store<T>(key: string, value: T): Promise<void> {\n    await this.state.storage.put(key, value);\n  }\n\n  /**\n   * Helper to retrieve data\n   */\n  protected async retrieve<T>(key: string): Promise<T | undefined> {\n    return this.state.storage.get<T>(key);\n  }\n\n  /**\n   * Helper to delete data\n   */\n  protected async remove(key: string): Promise<boolean> {\n    return this.state.storage.delete(key);\n  }\n} ","/// <reference types=\"@cloudflare/workers-types\" />\n\nimport type { Env, WorkerExecutionContext, ScheduledController, MessageBatch } from './cloudflare';\n\n/**\n * Base Worker class with type safety\n */\nexport abstract class TypedWorker {\n  constructor(protected readonly env: Env) {}\n\n  /**\n   * Handle fetch events\n   */\n  async fetch(\n    request: Request,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<Response> {\n    try {\n      // Setup error handling\n      if (this.shouldPassThroughErrors(request)) {\n        ctx.passThroughOnException();\n      }\n\n      // Handle the request\n      return await this.handleRequest(request, env, ctx);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Handle scheduled events\n   */\n  async scheduled(\n    controller: ScheduledController,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<void> {\n    try {\n      await this.handleScheduled(controller, env, ctx);\n    } catch (error) {\n      console.error('Error in scheduled event:', error);\n      throw error; // Let the platform handle retries\n    }\n  }\n\n  /**\n   * Handle queue messages\n   */\n  async queue(\n    batch: MessageBatch,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<void> {\n    try {\n      await this.handleQueue(batch, env, ctx);\n    } catch (error) {\n      console.error('Error processing queue:', error);\n      throw error; // Let the platform handle retries\n    }\n  }\n\n  /**\n   * Handle HTTP requests (to be implemented by subclasses)\n   */\n  protected abstract handleRequest(\n    request: Request,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<Response>;\n\n  /**\n   * Handle scheduled events (optional override)\n   */\n  protected async handleScheduled(\n    controller: ScheduledController,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<void> {\n    // Optional override\n  }\n\n  /**\n   * Handle queue messages (optional override)\n   */\n  protected async handleQueue(\n    batch: MessageBatch,\n    env: Env,\n    ctx: WorkerExecutionContext\n  ): Promise<void> {\n    // Optional override\n  }\n\n  /**\n   * Handle errors\n   */\n  protected handleError(error: unknown): Response {\n    console.error('Worker error:', error);\n    return new Response('Internal Error', { status: 500 });\n  }\n\n  /**\n   * Determine if errors should be passed through\n   */\n  protected shouldPassThroughErrors(request: Request): boolean {\n    return false; // Override to enable pass-through\n  }\n\n  /**\n   * Helper to wait for async tasks\n   */\n  protected waitUntil(\n    ctx: WorkerExecutionContext,\n    promise: Promise<unknown>\n  ): void {\n    ctx.waitUntil(promise.catch(error => {\n      console.error('Background task error:', error);\n    }));\n  }\n\n  /**\n   * Helper to create JSON responses\n   */\n  protected json(data: unknown, init?: ResponseInit): Response {\n    return new Response(JSON.stringify(data), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(init?.headers || {})\n      },\n      ...init\n    });\n  }\n\n  /**\n   * Helper to parse JSON requests\n   */\n  protected async parseJson<T = unknown>(request: Request): Promise<T> {\n    const contentType = request.headers.get('Content-Type');\n    if (!contentType?.includes('application/json')) {\n      throw new Error('Expected JSON content type');\n    }\n    return request.json() as Promise<T>;\n  }\n\n  /**\n   * Helper to validate request method\n   */\n  protected validateMethod(\n    request: Request,\n    allowedMethods: string[]\n  ): void {\n    if (!allowedMethods.includes(request.method)) {\n      throw new Error(`Method ${request.method} not allowed`);\n    }\n  }\n} "]}